# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_models.vae.ipynb.

# %% auto 0
__all__ = ['SEED', 'FashionMnistDataset', 'Encoder', 'Decoder', 'AutoEncoder']

# %% ../../nbs/00_models.vae.ipynb 3
import pandas as pd
import torch
from matplotlib import pyplot as plt
import numpy as np
import torch.nn as nn
from torch.optim import Adam
from tqdm import tqdm
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader
import ipdb
import torchvision

SEED = 42
np.random.seed(SEED)
torch.manual_seed(SEED)
torch.cuda.manual_seed(SEED)
torch.backends.cudnn.deterministic = True

# %% ../../nbs/00_models.vae.ipynb 5
class FashionMnistDataset(Dataset):
    "Fashion MNIST Dataset"
    
    def __init__(self, 
        csv_file:str="~/Data/fashion-mnist/fashion-mnist_train.csv" # Path to csv data file
        ):
        super().__init__()
        # read csv
        self.train = pd.read_csv(csv_file)
        # normalize data
        X = torch.tensor(self.train.iloc[:,1:].values / 255)
        self.X = (X-0.5)/0.5
        self.Y = torch.tensor(self.train.iloc[:,0].values).to(torch.int)
        self.X, self.Y = self.X, self.Y
    
    def __len__(self):
        return len(self.train)

    def __getitem__(self, idx):
        return (self.X[idx],  self.Y[idx])

# %% ../../nbs/00_models.vae.ipynb 8
class Encoder(nn.Module):
    "Encoder"
    
    def __init__(self,
        latent_dim=2 # Latent dimension
        ):
        super().__init__()
        self.layer1 = nn.Linear(784, 512)
        self.layer2 = nn.Linear(512, latent_dim)        

    def forward(self, x):
        seq = nn.Sequential(self.layer1, nn.ReLU(), self.layer2, nn.ReLU())
        z = seq(x)
        return z


# %% ../../nbs/00_models.vae.ipynb 10
class Decoder(nn.Module):
  "Decoder"
  
  def __init__(self,
    latent_dim:int=2 # Latent dimension
    ):
    super().__init__()
    self.layer1 = nn.Linear(latent_dim, 512)
    self.layer2 = nn.Linear(512, 784)

  def forward(self,
    z:torch.Tensor # Latent variables
    )->torch.Tensor: # Image output
    seq = nn.Sequential(self.layer1, nn.ReLU(), self.layer2, nn.Sigmoid())
    x = seq(z)
    return(x)

# %% ../../nbs/00_models.vae.ipynb 11
class AutoEncoder(nn.Module):
  "autoencoder"

  def __init__(self,
    latent_dim:int=2 # Latent dimension
    ):
    super().__init__()
    self.encoder = Encoder(latent_dim)
    self.decoder = Decoder(latent_dim)
  
  def forward(self, x:torch.Tensor):
    z = self.encoder(x)
    return self.decoder(z)
